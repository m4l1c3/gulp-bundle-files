"use strict";var path=require("path"),fs=require("fs"),fixtures=function(){var n=this;n.data=[],this.init=function(){var e=fs.readdirSync(n.getPath());for(var i in e){var t=e.hasOwnProperty(i)?e[i].substring(0,e[i].indexOf(".")):"";n.data[t]=e[i]}},this.getPath=function(){return path.join(__dirname,"fixtures")},this.get=function(e){return require(path.join(n.getPath(),n.data[e]))},n.init()};exports.fixtures=fixtures;var bundle=require("../"),Bundle=require("../Bundle.js").Bundle,bundleChecker=require("../BundleCheck.js").BundleCheck,should=require("should"),gutil=require("gulp-util"),PluginError=gutil.PluginError,config=require("../package.json"),fixtures=require("./fixtures").fixtures,gulpTaskFactory=require("../GulpTaskFactory").gulpTaskFactory,cp=require("child_process"),junk=require("junk"),BundleTest=function(){var n=this,e=require("../Bundle").Bundle,i=require("gulp-util"),t=i.PluginError;if(n.isValid=!0,n.bundle=new e(0,[0,"blahblahblah.js"]),void 0===n.bundle.getName())throw n.isValid=!1,new t(config.name,"Bundle test has failed, missing name");if(void 0===n.bundle.isLast())throw n.isValid=!1,new t(config.name,"Bundle test has failed missing isLast")},bundleTest=new BundleTest,fs=require("fs"),path=require("path");require("mocha"),describe("gulp-bundle-files",function(){var n=new fixtures;describe("bundle()",function(){it("should throw, No uglify settings",function(){(function(){gulpTaskFactory("uglify",n.get("bad-uglify"))}).should["throw"](new PluginError(config.name,"No uglify settings"))}),it("should pass, upon creation bundleTest will return true if all is well",function(){bundleTest.isValid.should.equal(!0)}),it("should pass, upon creation a bundle should have getName as a function",function(){var n=typeof bundleTest.bundle.getName;n.should.equal("function")}),it("should pass, upon creation a bundle should have getName as a function",function(){var n=typeof bundleTest.bundle.isLast;n.should.equal("function")}),it("should pass, getName should return ",function(){bundleTest.bundle.getName().should.equal(0)}),it("should pass, isLast should return true",function(){bundleTest.bundle.isLast().should.equal(!0)}),it("should throw, fixture with bad file",function(){(function(){n.get("bag-uglify")}).should["throw"](new TypeError("Path must be a string. Received undefined"))}),it("should throw, bundle checker doesn't work",function(){(function(){var e=n.get("bundles");bundleChecker(Object.keys(e.files),e.files,!0)}).should["throw"](new PluginError(config.name,"Bundle check is not working"))}),it("should throw, No concat settings",function(){(function(){gulpTaskFactory("concat",n.get("bad-concat"))}).should["throw"](new PluginError(config.name,"No concat settings"))}),it("should throw, when destination folder is missing",function(){(function(){bundle(n.get("no-options"))}).should["throw"](new PluginError(config.name,"Missing destinationFolder gulp-bundle-files"))}),it("should throw, bundle does not have any items",function(){(function(){Bundle(0,n.get("no-items"))}).should["throw"](new PluginError(config.name,"No items passed into bundle"))}),it("should throw, when files is not array or object",function(){(function(){bundle(n.get("incorrect-format-of-files"))}).should["throw"](new PluginError(config.name,"File input in wrong format, please use an array or object."))}),it("should throw, when options.files has no bundles",function(){(function(){bundle(n.get("no-bundles"))}).should["throw"](new PluginError(config.name,"No file input stored in options.files."))}),it("should throw, when bundle is missing files",function(){(function(){bundle(n.get("full-options"),!0)}).should["throw"](new PluginError(config.name,"Error creating bundle, bundles are missing files."))}),it("should throw, when unable to create bundle, missing bundle name",function(){(function(){bundle(n.get("no-bundle-name"))}).should["throw"](new PluginError(config.name,"Error creating bundle: no bundle name"))}),it("should throw, when unable to find items for a bundle",function(){(function(){bundle(n.get("no-bundle-contents"))}).should["throw"](new PluginError(config.name,"No files inside named bundle"))}),it("should pass, gulp should run with sample config and result in 2 built JS files",function(n){this.timeout(15e3),cp.exec("gulp bundle",function(e,i,t){null==e&&fs.readdir(path.join(__dirname,"/../dist/js"),function(n,e){if(n)throw n;e=e.filter(junk.not),3==e.length&&e.forEach(function(n,e){return fs.existsSync(path.join("../dist/",n))?void 0:!1})}),n()})}),it("should pass, gulp should run with sample config and result in 2 built JS files",function(n){this.timeout(15e3),cp.exec("gulp bundle --mode production",function(e,i,t){null==e&&fs.readdir(path.join(__dirname,"/../dist/js"),function(n,e){if(n)throw n;e=e.filter(junk.not),3==e.length&&e.forEach(function(n,e){return fs.existsSync(path.join("../dist/",n))?void 0:!1})}),n()})}),it("should pass, gulp should run with sample config and result in 1 built CSS files",function(n){this.timeout(15e3),cp.exec("gulp bundle",function(e,i,t){null==e&&fs.readdir(path.join(__dirname,"/../dist/css"),function(n,e){if(n)throw n;e=e.filter(junk.not),2==e.length&&e.forEach(function(n,e){return fs.existsSync(path.join("../dist/",n))?void 0:!1})}),n()})})})});